import com.github.spotbugs.snom.SpotBugsTask

buildscript {
    ext.kotlin_version = '1.6.0'
    ext.junit_version = '4.13.2'
    ext.jacoco_version = '0.8.7'
    repositories {
        google()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.3'
        classpath 'com.hiya:jacoco-android:0.2'
        classpath 'com.github.spotbugs.snom:spotbugs-gradle-plugin:5.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.19.0"
        classpath "org.jacoco:org.jacoco.core:$jacoco_version"
        classpath "org.jacoco:org.jacoco.report:$jacoco_version"
        classpath "org.jacoco:org.jacoco.agent:$jacoco_version"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.hiya.jacoco-android'
apply plugin: "com.github.spotbugs"
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'maven-publish' // needed for JitPack.io

repositories {
    google()
    maven { url "https://jitpack.io" }
    maven { url "https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven" }

    mavenCentral()
}

configurations {
    ktlint

    all {
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'org.ogce', module: 'xpp3' // xpp3 is for plain java, Android uses kxml2

        resolutionStrategy {
            // check for updates every build
            cacheChangingModulesFor 0, 'seconds'
            eachDependency { details ->
                if ('org.jacoco' == details.requested.group) {
                    details.useVersion "$jacoco_version"
                }
            }

        }
    }
}

ext {
    lombokVersion = "1.18.22"
}

dependencies {
    implementation 'org.apache.jackrabbit:jackrabbit-webdav:2.13.1'
    api 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.gitlab.bitfireAT:dav4jvm:2.1.3' // in transition phase, we use old and new libs
    implementation 'org.parceler:parceler-api:1.1.13'
    annotationProcessor 'org.parceler:parceler:1.1.13'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'
    implementation 'androidx.annotation:annotation:1.3.0'
    compileOnly 'com.google.code.findbugs:annotations:3.0.1u2'

    //noinspection AnnotationProcessorOnCompilePath
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    ktlint "com.pinterest:ktlint:0.43.1"

    implementation "androidx.core:core-ktx:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0'
    spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.4.7'

    // dependencies for tests
    testImplementation "junit:junit:$junit_version"
    testImplementation 'org.mockito:mockito-core:4.1.0'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'

    // dependencies for instrumented tests
    // JUnit4 Rules
    androidTestImplementation "junit:junit:$junit_version"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'

    // Android JUnit Runner
    androidTestImplementation 'androidx.test:runner:1.4.0'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'
    androidTestImplementation 'commons-io:commons-io:2.11.0'
    androidTestImplementation 'net.bytebuddy:byte-buddy:1.12.2'
}

spotbugs {
    ignoreFailures = true // should continue checking
    effort = "max"
    reportLevel = "medium"
}

tasks.withType(SpotBugsTask){task ->
    String variantNameCap = task.name.replace("spotbugs", "")
    String variantName = variantNameCap.substring(0, 1).toLowerCase() + variantNameCap.substring(1)
    dependsOn "compile${variantNameCap}Sources"

    classes = files("$project.buildDir/intermediates/javac/${variantName}")
    excludeFilter = file("${project.rootDir}/scripts/analysis/spotbugs-filter.xml")
    reports {
        xml.enabled = false
        html {
            enabled = true
            destination = file("$project.buildDir/reports/spotbugs/spotbugs.html")
        }
    }
}

android {
    compileSdkVersion 30

    sourceSets {
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    lintOptions {
        // config
        warningsAsErrors true
        abortOnError true
        disable 'GradleDependency','InvalidPackage'
        // output
        htmlReport true
        htmlOutput file("$project.buildDir/reports/lint/lint.html")
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 30

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "TEST_SERVER_URL", "${NC_TEST_SERVER_BASEURL}"
        testInstrumentationRunnerArgument "TEST_SERVER_USERNAME", "${NC_TEST_SERVER_USERNAME}"
        testInstrumentationRunnerArgument "TEST_SERVER_PASSWORD", "${NC_TEST_SERVER_PASSWORD}"
        testInstrumentationRunnerArguments disableAnalytics: 'true'

        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

tasks.register("combinedTestReport", JacocoReport) {

    jacocoClasspath = configurations['jacocoAnt']

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }

    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/debugAndroidTest/connected/*coverage.ec'
    ])
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "--reporter=plain", "--reporter=plain,output=${buildDir}/ktlint.txt,src/**/*.kt"
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

task installGitHooks(type: Copy, group: "development") {
    description = "Install git hooks"
    from("${project.rootDir}/scripts/hooks") {
        include '*'
    }
    into '.git/hooks'
}

detekt {
    reports {
        xml {
            enabled = false
        }
    }
    config = files("detekt.yml")
    input = files("src/")
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId = 'com.nextcloud.android-library'
                artifactId = 'master'
            }
        }
    }
}

jacoco {
    toolVersion = "$jacoco_version"
}

