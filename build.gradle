import com.github.spotbugs.SpotBugsTask

buildscript {
    repositories {
        google()
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath('com.dicedmelon.gradle:jacoco-android:0.1.4') {
            exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        }
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:2.0.0'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'jacoco-android'
apply plugin: "com.github.spotbugs"

repositories {
    google()
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }

    flatDir {
        dirs 'libs'
    }
}

configurations.all {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile 'org.apache.jackrabbit:jackrabbit-webdav:2.12.6'
    implementation 'org.parceler:parceler-api:1.1.12'
    annotationProcessor 'org.parceler:parceler:1.1.12'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    implementation 'androidx.annotation:annotation:1.1.0'
    compileOnly 'com.google.code.findbugs:annotations:3.0.1u2'

    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.9.0'
    spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.4.5'
    
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.28.2'
    
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'
}

spotbugs {
    toolVersion = '3.1.12'
}

android {
    compileSdkVersion 28

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    lintOptions {
        abortOnError false
        htmlReport true
        htmlOutput file("$project.buildDir/reports/lint/lint.html")
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "TEST_SERVER_URL", "${NC_TEST_SERVER_BASEURL}"
        testInstrumentationRunnerArgument "TEST_SERVER_USERNAME", "${NC_TEST_SERVER_USERNAME}"
        testInstrumentationRunnerArgument "TEST_SERVER_PASSWORD", "${NC_TEST_SERVER_PASSWORD}"
    }

    tasks.register("spotbugs", SpotBugsTask) {
        ignoreFailures = false
        effort = "max"
        reportLevel = "medium"
        classes = fileTree("$project.buildDir/intermediates/javac/debug/compileDebugJavaWithJavac/")
        excludeFilter = file("${project.rootDir}/scripts/analysis/spotbugs-filter.xml")
        source = fileTree('src/main/java')
        classpath = files()
        include '**/*.java'
        exclude '**/gen/**'

        reports {
            xml.enabled = false
            html.enabled = true
            html {
                destination = file("$project.buildDir/reports/spotbugs/spotbugs.html")
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

task combinedTestReport(type: JacocoReport) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/compileDebugJavaWithJavac/classes/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/debugAndroidTest/connected/*coverage.ec'
    ])
}
