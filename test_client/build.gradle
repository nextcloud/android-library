apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'

repositories {
    jcenter()
    google()
	mavenCentral()
}

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        google()
		mavenCentral()
    }
    dependencies {
		classpath 'org.codehaus.groovy:groovy-all:2.4.12' 
        classpath('com.dicedmelon.gradle:jacoco-android:0.1.3') { 
            exclude group: 'org.codehaus.groovy', module: 'groovy-all' 
        }
    }
}

ext {
    jacocoVersion = "0.8.2"
}

dependencies {
    implementation project(':')

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.22.0'
    // dependencies for instrumented tests
    // JUnit4 Rules
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    // Android JUnit Runner
    androidTestImplementation 'com.android.support.test:runner:1.0.2'

    jacocoAnt "org.jacoco:org.jacoco.ant:${project.jacocoVersion}"
    jacocoAgent "org.jacoco:org.jacoco.agent:${project.jacocoVersion}"
    androidJacocoAgent "org.jacoco:org.jacoco.agent:${project.jacocoVersion}"
    androidJacocoAnt "org.jacoco:org.jacoco.ant:${project.jacocoVersion}"
    androidJacocoAnt "org.jacoco:org.jacoco.core:${project.jacocoVersion}"
    androidJacocoAnt "org.jacoco:org.jacoco.report:${project.jacocoVersion}"
    androidJacocoAnt "org.jacoco:org.jacoco.agent:${project.jacocoVersion}"
}

android {
    compileSdkVersion 28

    defaultConfig {
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }
}

task combinedTestReport(type: JacocoReport) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}
